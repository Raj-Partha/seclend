buildscript {
    ext.corda_release_group = 'net.corda'
    ext.corda_release_version = '3.2-corda'
    ext.corda_gradle_plugins_version = '3.1.0'
    ext.junit_version = '4.12'
    ext.quasar_version = '0.7.9'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

apply plugin: 'java'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir "config/dev"
        }

    }
    test {
        resources {
            srcDir "config/test"
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    testCompile "junit:junit:$junit_version"

    // Corda integration dependencies
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-finance:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaCompile "$corda_release_group:corda-webserver-impl:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-webserver:$corda_release_version"
    compile 'com.mashape.unirest:unirest-java:1.4.9'
    compile 'org.apache.httpcomponents:httpclient:4.3.6'
    compile 'org.apache.httpcomponents:httpasyncclient:4.0.2'
    compile 'org.apache.httpcomponents:httpmime:4.3.6'
    compile 'org.json:json:20140107'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'org.springframework:spring-web:3.0.2.RELEASE'
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    // CorDapp dependencies
    // Specify your CorDapp's dependencies below, including dependent CorDapps.
    // We've defined Cash as a dependent CorDapp as an example.
    cordapp project(":cordapp")
    cordapp project(":cordapp-contracts-states")
    cordapp "$corda_release_group:corda-finance:$corda_release_version"
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters" // Required for passing named arguments to your flow via the shell.
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    node {
        name "O=Notary,L=India,C=IN"
        notary = [validating: true]
        p2pPort 10002
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "$corda_release_group:corda-finance:$corda_release_version"
        ]
    }
    node {
        name "O=ABCInvestmentBank,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        webPort 10020
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "$corda_release_group:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=XYZMutualFund,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        webPort 10010
        cordapps = [
                "$project.group:cordapp-contracts-states:$project.version",
                "$project.group:cordapp:$project.version",
                "$corda_release_group:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

task runTemplateClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.template.TemplateClient'
    args 'localhost:10006'
}


task updateMarketPlace(dependsOn: ['deployNodes']) {
    def nodesToRoleMapping = ["O=XYZMutualFund,L=New York,C=US"  : "Lender",
                              "O=ABCInvestmentBank,L=London,C=GB": "Borrower"]
    def fileName = project.property("marketPlaceDir") + "/cordaNodes.csv"
    delete fileName
    new File(fileName).withWriter { out ->
        deployNodes.nodes.eachWithIndex { node, index ->
            def name = node.name
            def shortName = node.name.substring(node.name.indexOf("=") +1, node.name.indexOf(",") )
            def webPort = ""
            println nodesToRoleMapping[name]
            def roles = nodesToRoleMapping.get(name, "")
            if (node.config.object['webAddress'] != null) {
                webPort = node.config.object['webAddress']?.value
            }
            println webPort
            println roles


            out.println(name + "|" + shortName + "|" + webPort + "|" + roles +" \n")
        }
    }
}


